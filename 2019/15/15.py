import random
import copy
from dijkstar import Graph, find_path

with open("input.txt") as f:
    line = f.readline()


def getParameters(program, currentPosition, instruction, numberOfParameters, relativeBase):

    parameters = []
    for i in range(numberOfParameters):

        paramMode = instruction[2-i]
        if paramMode == "0": # Position mode
            parameters.append(program[program[currentPosition+1+i]])
        elif paramMode == "1": # Immediate mode
            parameters.append(program[currentPosition+1+i])
        elif paramMode == "2": # Relative mode
            actualAddress = relativeBase + program[currentPosition+1+i]

            parameters.append(program[actualAddress])

    return parameters


def getOutAddr(program, currentPosition, relativeBase, instruction):
    paramMode = instruction[0]

    outAddr = -1

    if paramMode == "0" or paramMode == "1":
        outAddr = program[currentPosition]
    elif paramMode == "2":
        #print(paramMode)
        outAddr = program[currentPosition] + relativeBase

    return outAddr

class Robot():
    
    

    def __init__(self):
        self.program = [int(p) for p in line.split(",")] # Split at the delimiter
        self.program.extend([0 for i in range(10000)])
        #program[1] = initalValue1
        #program[2] = initalValue2

        self.currentPosition = 0

        self.relativeBase = 0
    


    def doMovement(self, directionToMove):
        while self.currentPosition < len(self.program):

            '''ABCDE
                1002

                DE - two-digit opcode,      02 == opcode 2
                C - mode of 1st parameter,  0 == position mode
                B - mode of 2nd parameter,  1 == immediate mode
                A - mode of 3rd parameter,  0 == position mode,
                                                omitted due to being a leading zero
            '''
            instruction = str(self.program[self.currentPosition]).zfill(5)
            opcode = int(instruction[-2:])

            #print(instruction)

            """  oprand1 = self.program[self.program[i+1]]
            oprand2 = self.program[self.program[i+2]]
            outaddr = self.program[i+3] """
            

            if opcode == 1: # Addition
                
                # Need to get our parameters

                # Addition takes 2
                
                numberOfParameters = 2
                
                parameters = getParameters(self.program, self.currentPosition, instruction, numberOfParameters, self.relativeBase)

                outaddr = getOutAddr(self.program, (self.currentPosition + numberOfParameters + 1), self.relativeBase, instruction)

                    

                self.program[outaddr] = parameters[0] + parameters[1]

                self.currentPosition += 4


            elif opcode == 2: # Multiplication
                # Need to get our parameters

                # Multiplication takes 2
                
                numberOfParameters = 2
                
                parameters = getParameters(self.program, self.currentPosition, instruction, numberOfParameters, self.relativeBase)

                outaddr = getOutAddr(self.program, (self.currentPosition + numberOfParameters + 1), self.relativeBase, instruction)

                    

                self.program[outaddr] = parameters[0] * parameters[1]


                self.currentPosition += 4
                

            elif opcode == 3: # Takes an input and stores it at position
                
                inp = directionToMove #int(input("Enter a value: "))

                paramMode = instruction[2]

                if paramMode == "0" or paramMode == "1":
                    outAddr = self.program[self.currentPosition+1]
                elif paramMode == "2":
                    #print(paramMode)
                    outAddr = self.program[self.currentPosition+1] + self.relativeBase
            

                self.program[outAddr] = inp

                self.currentPosition += 2

            elif opcode == 4: # Outputs the value stored at the parameter
                
                inp = self.program[self.currentPosition + 1]

                numberOfParameters = 1

                out = getParameters(self.program, self.currentPosition, instruction, numberOfParameters, self.relativeBase)

                #print("output: "+  str(out[0]))
                '''
                if instruction[2] == "0": # Position mode
                    print(self.program[inp])
                elif instruction[2] == "1": # Immediate mode
                    print(inp)
                '''
                self.currentPosition += 2

                return out[0]

            elif opcode == 5: # Jump if true

                numberOfParameters = 2
                
                parameters = getParameters(self.program, self.currentPosition, instruction, numberOfParameters, self.relativeBase)

                if parameters[0] != 0:
                    self.currentPosition = parameters[1]
                else:
                    self.currentPosition += 3

            elif opcode == 6: # Jump if false

                numberOfParameters = 2
                
                parameters = getParameters(self.program, self.currentPosition, instruction, numberOfParameters, self.relativeBase)

                if parameters[0] == 0:
                    self.currentPosition = parameters[1]
                else:
                    self.currentPosition += 3

            elif opcode == 7: # Less than

                numberOfParameters = 2

                parameters = getParameters(self.program, self.currentPosition, instruction, numberOfParameters, self.relativeBase)

                outaddr = getOutAddr(self.program, (self.currentPosition + numberOfParameters + 1), self.relativeBase, instruction)

                if parameters[0] < parameters[1]:
                    self.program[outaddr] = 1
                else:
                    self.program[outaddr] = 0

                self.currentPosition += 4

            elif opcode == 8: # Equals

                numberOfParameters = 2

                parameters = getParameters(self.program, self.currentPosition, instruction, numberOfParameters, self.relativeBase)

                outaddr = getOutAddr(self.program, (self.currentPosition + numberOfParameters + 1), self.relativeBase, instruction)

                if parameters[0] == parameters[1]:
                    self.program[outaddr] = 1
                else:
                    self.program[outaddr] = 0

                self.currentPosition += 4

            elif opcode == 9: #Adjust relative base

                
                numberOfParameters = 1

                adjustment = getParameters(self.program, self.currentPosition, instruction, numberOfParameters, self.relativeBase)

                self.relativeBase += adjustment[0]


                self.currentPosition += 2


            elif opcode == 99: # Terminate

                print("Halted")
                break

        return self.program[0]



myRobot = Robot()

# First need to find the oxygen tile

# Can give the robot a movement command using myRobot.doMovement(direction)

map = {} # Each key should be a coordinate with the value being the tile type

oxygenFound = False

x = 0
y = 0
currentDirection = 1

def drawMap():

    gridSize = 30

    #print(robotCoord)
    for x in range(-gridSize, gridSize):

        row = ""
        for y in range(-gridSize, gridSize):
            coordString = "{0},{1}".format(x, y)

            #print(coordString)

            if coordString in map.keys():# and coordString != robotCoord:
                row += map[coordString]

            else:
                row += " "

            '''
            elif coordString == robotCoord:

                #print("FOUND ROBOT")
                if currentDirection == 1: # Trying to move north
                    row += "^"
                elif currentDirection == 2: # Trying to move south
                    row += "v"
                elif currentDirection == 3: # Trying to move west
                    row += "<"
                elif currentDirection == 4: # Trying to move east
                    row += ">"
            '''

        print(row)



# Flood fill algorithm
# Looks for all nodes that are connected to the start node by a path of target colour.
# Changes those nodes to the replacement colour

# Target colour is when it's not in the colour map
# Replacement colour is putting them in the colour map


colourMap = []

def floodFill(x,y, robot):

    global oxygenFound


    
    #if oxygenFound:
    #    return

    #drawMap()
    # If the node is in the colour map return
    node = (x,y)
    if node in colourMap:
        return

    colourMap.append(node)

    # Perform the flood fill in the directions that we can

    # NORTH
    robot1 = copy.deepcopy(robot)
    nextBlock = robot1.doMovement(1)

    if nextBlock == 2:
        print("OXYGEN AT " + str(x) + "," + str(y+1))

        oxygenFound = True

        #return

    elif nextBlock == 1 or nextBlock == 2: 
        map["{0},{1}".format(x, y+1)] = "."
        floodFill(x, y+1, robot1)


    # SOUTH
    robot1 = copy.deepcopy(robot)
    nextBlock = robot1.doMovement(2)

    if nextBlock == 2:
        print("OXYGEN AT " + str(x) + "," + str(y-1))

        oxygenFound = True

        #return

    elif nextBlock == 1 or nextBlock == 2:
        map["{0},{1}".format(x, y-1)] = "."
        floodFill(x, y-1, robot1)


    # WEST
    robot1 = copy.deepcopy(robot)
    nextBlock = robot1.doMovement(3)

    if nextBlock == 2:
        print("OXYGEN AT " + str(x-1) + "," + str(y))

        oxygenFound = True

        #return

    elif nextBlock == 1 or nextBlock == 2:
        map["{0},{1}".format(x-1, y)] = "."
        floodFill(x-1, y, robot1)


    # EAST
    robot1 = copy.deepcopy(robot)
    nextBlock = robot1.doMovement(4)

    if nextBlock == 2:
        print("OXYGEN AT " + str(x+1) + "," + str(y))

        oxygenFound = True

        #return

    elif nextBlock == 1 or nextBlock == 2:
        map["{0},{1}".format(x+1, y)] = "."
        floodFill(x+1, y, robot1)


    




'''
while not oxygenFound:
    result = myRobot.doMovement(currentDirection)

    # Figure out which tile we are trying to move to

    if currentDirection == 1: # Trying to move north
        tileMovingTo = "{0},{1}".format(x, y+1)
    elif currentDirection == 2: # Trying to move south
        tileMovingTo = "{0},{1}".format(x, y-1)
    elif currentDirection == 3: # Trying to move west
        tileMovingTo = "{0},{1}".format(x-1, y)
    elif currentDirection == 4: # Trying to move east
        tileMovingTo = "{0},{1}".format(x+1, y)


    if result == 0: # If we hit a wall
        map[tileMovingTo] = "#"

        currentDirection = random.randint(1,4)

    elif result == 1: # We moved
        map[tileMovingTo] = "."

        x = int(tileMovingTo.split(",")[0])
        y = int(tileMovingTo.split(",")[1])


    elif result == 2:
        map[tileMovingTo] = "O"
        oxygenFound = True

    #drawMap(currentDirection, "{0},{1}".format(x,y))
'''

#floodFill(0,0, Robot()) # Run this to get the map and where oxygen is

print(map)

#input("WAIT: ")

# The map contains all of the tiles that you can get to
map = {'0,1': '.', '0,2': '.', '-1,2': '.', '-2,2': '.', '-2,3': '.', '-2,4': '.', '-3,4': '.', '-4,4': '.', '-5,4': '.', '-6,4': '.', '-7,4': '.', '-8,4': '.', '-8,3': '.', '-8,2': '.', '-9,2': '.', '-10,2': '.', '-10,1': '.', '-10,0': '.', '-11,0': '.', '-12,0': '.', '-12,-1': '.', '-12,-2': '.', '-12,-3': '.', '-12,-4': '.', '-12,-5': '.', '-12,-6': '.', '-12,-7': '.', '-12,-8': '.', '-11,-8': '.', '-10,-8': '.', '-10,-9': '.', '-10,-10': '.', '-10,-11': '.', '-10,-12': '.', '-10,-13': '.', '-10,-14': '.', '-10,-15': '.', '-10,-16': '.', '-9,-16': '.', '-8,-16': '.', '-8,-17': '.', '-8,-18': '.', '-7,-18': '.', '-6,-18': '.', '-6,-17': '.', '-6,-16': '.', '-6,-15': '.', '-6,-14': '.', '-5,-14': '.', '-4,-14': '.', '-3,-14': '.', '-2,-14': '.', '-1,-14': '.', '0,-14': '.', '1,-14': '.', '2,-14': '.', '3,-14': '.', '4,-14': '.', '4,-13': '.', '4,-12': '.', '3,-12': '.', '2,-12': '.', '1,-12': '.', '0,-12': '.', '0,-11': '.', '0,-10': '.', '-1,-10': '.', '-2,-10': '.', '-2,-11': '.', '-2,-12': '.', '-3,-12': '.', '-4,-12': '.', '-4,-11': '.', '-4,-10': '.', '-5,-10': '.', '-6,-10': '.', '-6,-11': '.', '-6,-12': '.', '-7,-12': '.', '-8,-12': '.', '-8,-11': '.', '-8,-10': '.', '-8,-9': '.', '-8,-8': '.', '-7,-8': '.', '-6,-8': '.', '-6,-7': '.', '-6,-6': '.', '-6,-5': '.', '-6,-4': '.', '-5,-4': '.', '-4,-4': '.', '-4,-5': '.', '-4,-6': '.', '-4,-7': '.', '-4,-8': '.', '-3,-8': '.', '-2,-8': '.', '-2,-7': '.', '-2,-6': '.', '-2,-5': '.', '-2,-4': '.', '-1,-4': '.', '0,-4': '.', '0,-3': '.', '0,-2': '.', '-1,-2': '.', '-2,-2': '.', '-3,-2': '.', '-4,-2': '.', '-4,-1': '.', '-4,0': '.', '-4,1': '.', '-4,2': '.', '-5,2': '.', '-6,2': '.', '-6,1': '.', '-6,0': '.', '-7,0': '.', '-8,0': '.', '-8,-1': '.', '-8,-2': '.', '-8,-3': '.', '-8,-4': '.', '-9,-4': '.', '-10,-4': '.', '-10,-3': '.', '-10,-2': '.', '-10,-5': '.', '-10,-6': '.', '-9,-6': '.', '-8,-6': '.', '-7,-2': '.', '-6,-2': '.', '-3,0': '.', '-2,0': '.', '1,-2': '.', '2,-2': '.', '3,-2': '.', '4,-2': '.', '5,-2': '.', '6,-2': '.', '7,-2': '.', '8,-2': '.', '8,-1': '.', '8,0': '.', '8,1': '.', '8,2': '.', '7,2': '.', '6,2': '.', '6,1': '.', '6,0': '.', '5,0': '.', '4,0': '.', '3,0': '.', '2,0': '.', '2,1': '.', '2,2': '.', '3,2': '.', '4,2': '.', '4,3': '.', '4,4': '.', '5,4': '.', '6,4': '.', '7,4': '.', '8,4': '.', '8,5': '.', '8,6': '.', '7,6': '.', '6,6': '.', '6,7': '.', '6,8': '.', '6,9': '.', '6,10': '.', '6,11': '.', '6,12': '.', '5,12': '.', '4,12': '.', '4,13': '.', '4,14': '.', '4,15': '.', '4,16': '.', '3,16': '.', '2,16': '.', '1,16': '.', '0,16': '.', '-1,16': '.', '-2,16': '.', '-2,17': '.', '-2,18': '.', '-1,18': '.', '0,18': '.', '1,18': '.', '2,18': '.', '2,19': '.', '2,20': '.', '1,20': '.', '0,20': '.', '-1,20': '.', '-2,20': '.', '-3,20': '.', '-4,20': '.', '-5,20': '.', '-6,20': '.', '-6,19': '.', '-6,18': '.', '-6,17': '.', '-6,16': '.', '-5,16': '.', '-4,16': '.', '-4,17': '.', '-4,18': '.', '-4,15': '.', '-4,14': '.', '-3,14': '.', '-2,14': '.', '-1,14': '.', '0,14': '.', '1,14': '.', '2,14': '.', '2,13': '.', '2,12': '.', '1,12': '.', '0,12': '.', '0,11': '.', '0,10': '.', '1,10': '.', '2,10': '.', '2,9': '.', '2,8': '.', '2,7': '.', '2,6': '.', '1,6': '.', '0,6': '.', '0,5': '.', '0,4': '.', '1,4': '.', '2,4': '.', '-1,6': '.', '-2,6': '.', '-2,7': '.', '-2,8': '.', '-3,8': '.', '-4,8': '.', '-4,7': '.', '-4,6': '.', '-5,6': '.', '-6,6': '.', '-7,6': '.', '-8,6': '.', '-8,7': '.', '-8,8': '.', '-9,8': '.', '-10,8': '.', '-10,9': '.', '-10,10': '.', '-11,10': '.', '-12,10': '.', '-13,10': '.', '-14,10': '.', '-14,11': '.', '-14,12': '.', '-13,12': '.', '-12,12': '.', '-11,12': '.', '-10,12': '.', '-10,13': '.', '-10,14': '.', '-9,14': '.', '-8,14': '.', '-8,15': '.', '-8,16': '.', '-9,16': '.', '-10,16': '.', '-10,17': '.', '-10,18': '.', '-10,19': '.', '-10,20': '.', '-11,20': '.', '-12,20': '.', '-13,20': '.', '-14,20': '.', '-15,20': '.', '-16,20': '.', '-16,19': '.', '-16,18': '.', '-15,18': '.', '-14,18': '.', '-13,18': '.', '-12,18': '.', '-12,17': '.', '-12,16': '.', '-12,15': '.', '-12,14': '.', '-13,14': '.', '-14,14': '.', '-15,14': '.', '-16,14': '.', '-16,15': '.', '-16,16': '.', '-17,16': '.', '-18,16': '.', '-18,15': '.', '-18,14': '.', '-18,13': '.', '-18,12': '.', '-18,11': '.', '-18,10': '.', '-18,9': '.', '-18,8': '.', '-17,8': '.', '-16,8': '.', '-16,9': '.', '-16,10': '.', '-16,11': '.', '-16,12': '.', '-16,7': '.', '-16,6': '.', '-15,6': '.', '-14,6': '.', '-13,6': '.', '-12,6': '.', '-12,7': '.', '-12,8': '.', '-13,8': '.', '-14,8': '.', '-11,6': '.', '-10,6': '.', '-10,5': '.', '-10,4': '.', '-11,4': '.', '-12,4': '.', '-13,4': '.', '-14,4': '.', '-14,3': '.', '-14,2': '.', '-14,1': '.', '-14,0': '.', '-14,-1': '.', '-14,-2': '.', '-15,-2': '.', '-16,-2': '.', '-17,-2': '.', '-18,-2': '.', '-18,-1': '.', '-18,0': '.', '-19,0': '.', '-20,0': '.', '-20,1': '.', '-20,2': '.', '-20,3': '.', '-20,4': '.', '-20,5': '.', '-20,6': '.', '-20,7': '.', '-20,8': '.', '-20,9': '.', '-20,10': '.', '-20,11': '.', '-20,12': '.', '-20,13': '.', '-20,14': '.', '-20,15': '.', '-20,16': '.', '-20,17': '.', '-20,18': '.', '-20,19': '.', '-20,20': '.', '-19,20': '.', '-18,20': '.', '-18,19': '.', '-18,18': '.', '-19,6': '.', '-18,6': '.', '-18,5': '.', '-18,4': '.', '-17,4': '.', '-16,4': '.', '-16,3': '.', '-16,2': '.', '-16,1': '.', '-16,0': '.', '-17,2': '.', '-18,2': '.', '-20,-1': '.', '-20,-2': '.', '-20,-3': '.', '-20,-4': '.', '-19,-4': '.', '-18,-4': '.', '-18,-5': '.', '-18,-6': '.', '-19,-6': '.', '-20,-6': '.', '-20,-7': '.', '-20,-8': '.', '-19,-8': '.', '-18,-8': '.', '-18,-9': '.', '-18,-10': '.', '-17,-10': '.', '-16,-10': '.', '-15,-10': '.', '-14,-10': '.', '-14,-9': '.', '-14,-8': '.', '-15,-8': '.', '-16,-8': '.', '-16,-7': '.', '-16,-6': '.', '-16,-5': '.', '-16,-4': '.', '-15,-4': '.', '-14,-4': '.', '-14,-5': '.', '-14,-6': '.', '-14,-11': '.', '-14,-12': '.', '-13,-12': '.', '-12,-12': '.', '-12,-11': '.', '-12,-10': '.', '-12,-13': '.', '-12,-14': '.', '-13,-14': '.', '-14,-14': '.', '-15,-14': '.', '-16,-14': '.', '-16,-13': '.', '-16,-12': '.', '-17,-12': '.', '-18,-12': '.', '-18,-13': '.', '-18,-14': '.', '-18,-15': '.', '-18,-16': '.', '-18,-17': '.', '-18,-18': '.', '-19,-18': '.', '-20,-18': '.', '-20,-17': '.', '-20,-16': '.', '-20,-15': '.', '-20,-14': '.', '-20,-13': '.', '-20,-12': '.', '-20,-11': '.', '-20,-10': '.', '-17,-18': '.', '-16,-18': '.', '-15,-18': '.', '-14,-18': '.', '-14,-17': '.', '-14,-16': '.', '-15,-16': '.', '-16,-16': '.', '-13,-16': '.', '-12,-16': '.', '-12,-17': '.', '-12,-18': '.', '-11,-18': '.', '-10,-18': '.', '-13,2': '.', '-12,2': '.', '-15,16': '.', '-14,16': '.', '-9,20': '.', '-8,20': '.', '-8,19': '.', '-8,18': '.', '-7,14': '.', '-6,14': '.', '-6,13': '.', '-6,12': '.', '-7,12': '.', '-8,12': '.', '-8,11': '.', '-8,10': '.', '-7,10': '.', '-6,10': '.', '-6,9': '.', '-6,8': '.', '-5,10': '.', '-4,10': '.', '-3,10': '.', '-2,10': '.', '-2,11': '.', '-2,12': '.', '-3,12': '.', '-4,12': '.', '-1,8': '.', '0,8': '.', '3,6': '.', '4,6': '.', '4,7': '.', '4,8': '.', '4,9': '.', '4,10': '.', '3,20': '.', '4,20': '.', '4,19': '.', '4,18': '.', '5,18': '.', '6,18': '.', '6,17': '.', '6,16': '.', '7,16': '.', '8,16': '.', '9,16': '.', '10,16': '.', '10,15': '.', '10,14': '.', '10,13': '.', '10,12': '.', '9,12': '.', '8,12': '.', '8,13': '.', '8,14': '.', '7,14': '.', '6,14': '.', '8,11': '.', '8,10': '.', '9,10': '.', '10,10': '.', '10,9': '.', '10,8': '.', '10,7': '.', '10,6': '.', '11,6': '.', '12,6': '.', '13,6': '.', '14,6': '.', '14,7': '.', '14,8': '.', '13,8': '.', '12,8': '.', '12,9': '.', '12,10': '.', '12,11': '.', '12,12': '.', '13,12': '.', '14,12': '.', '15,12': '.', '16,12': '.', '16,11': '.', '16,10': '.', '15,10': '.', '14,10': '.', '17,10': '.', '18,10': '.', '18,11': '.', '18,12': '.', '18,13': '.', '18,14': '.', '17,14': '.', '16,14': '.', '16,15': '.', '16,16': '.', '17,16': '.', '18,16': '.', '18,17': '.', '18,18': '.', '18,19': '.', '18,20': '.', '17,20': '.', '16,20': '.', '15,20': '.', '14,20': '.', '14,19': '.', '14,18': '.', '13,18': '.', '12,18': '.', '12,19': '.', '12,20': '.', '11,20': '.', '10,20': '.', '10,19': '.', '10,18': '.', '9,18': '.', '8,18': '.', '8,19': '.', '8,20': '.', '7,20': '.', '6,20': '.', '12,17': '.', '12,16': '.', '13,16': '.', '14,16': '.', '14,15': '.', '14,14': '.', '13,14': '.', '12,14': '.', '15,18': '.', '16,18': '.', '18,9': '.', '18,8': '.', '18,7': '.', '18,6': '.', '18,5': '.', '18,4': '.', '17,4': '.', '16,4': '.', '16,5': '.', '16,6': '.', '16,7': '.', '16,8': '.', '16,3': '.', '16,2': '.', '17,2': '.', '18,2': '.', '18,1': '.', '18,0': '.', '17,0': '.', '16,0': '.', '16,-1': '.', '16,-2': '.', '17,-2': '.', '18,-2': '.', '18,-3': '.', '18,-4': '.', '17,-4': '.', '16,-4': '.', '16,-5': '.', '16,-6': '.', '17,-6': '.', '18,-6': '.', '18,-7': '.', '18,-8': '.', '18,-9': '.', '18,-10': '.', '18,-11': '.', '18,-12': '.', '18,-13': '.', '18,-14': '.', '17,-14': '.', '16,-14': '.', '16,-13': '.', '16,-12': '.', '15,-12': '.', '14,-12': '.', '14,-11': '.', '14,-10': '.', '15,-10': '.', '16,-10': '.', '16,-9': '.', '16,-8': '.', '15,-8': '.', '14,-8': '.', '13,-8': '.', '12,-8': '.', '11,-8': '.', '10,-8': '.', '10,-7': '.', '10,-6': '.', '11,-6': '.', '12,-6': '.', '12,-5': '.', '12,-4': '.', '13,-4': '.', '14,-4': '.', '14,-3': '.', '14,-2': '.', '14,-1': '.', '14,0': '.', '13,0': '.', '12,0': '.', '12,-1': '.', '12,-2': '.', '11,-2': '.', '10,-2': '.', '10,-1': '.', '10,0': '.', '10,1': '.', '10,2': '.', '11,2': '.', '12,2': '.', '12,3': '.', '12,4': '.', '11,4': '.', '10,4': '.', '13,4': '.', '14,4': '.', '14,3': '.', '14,2': '.', '10,-3': '.', '10,-4': '.', '9,-4': '.', '8,-4': '.', '8,-5': '.', '8,-6': '.', '8,-7': '.', '8,-8': '.', '8,-9': '.', '8,-10': '.', '8,-11': '.', '8,-12': '.', '8,-13': '.', '8,-14': '.', '8,-15': '.', '8,-16': '.', '8,-17': '.', '8,-18': '.', '7,-18': '.', '6,-18': '.', '5,-18': '.', '4,-18': '.', '3,-18': '.', '2,-18': '.', '1,-18': '.', '0,-18': '.', '0,-17': '.', '0,-16': '.', '-1,-16': '.', '-2,-16': '.', '-2,-17': '.', '-2,-18': '.', '-3,-18': '.', '-4,-18': '.', '-4,-17': '.', '-4,-16': '.', '1,-16': '.', '2,-16': '.', '3,-16': '.', '4,-16': '.', '5,-16': '.', '6,-16': '.', '6,-15': '.', '6,-14': '.', '6,-13': '.', '6,-12': '.', '6,-11': '.', '6,-10': '.', '6,-9': '.', '6,-8': '.', '6,-7': '.', '6,-6': '.', '6,-5': '.', '6,-4': '.', '5,-4': '.', '4,-4': '.', '4,-5': '.', '4,-6': '.', '4,-7': '.', '4,-8': '.', '4,-9': '.', '4,-10': '.', '3,-10': '.', '2,-10': '.', '2,-9': '.', '2,-8': '.', '2,-7': '.', '2,-6': '.', '2,-5': '.', '2,-4': '.', '1,-6': '.', '0,-6': '.', '0,-7': '.', '0,-8': '.', '9,-18': '.', '10,-18': '.', '10,-17': '.', '10,-16': '.', '10,-15': '.', '10,-14': '.', '10,-13': '.', '10,-12': '.', '10,-11': '.', '10,-10': '.', '11,-10': '.', '12,-10': '.', '12,-11': '.', '12,-12': '.', '12,-13': '.', '12,-14': '.', '12,-15': '.', '12,-16': '.', '12,-17': '.', '12,-18': '.', '13,-18': '.', '14,-18': '.', '15,-18': '.', '16,-18': '.', '17,-18': '.', '18,-18': '.', '18,-17': '.', '18,-16': '.', '17,-16': '.', '16,-16': '.', '15,-16': '.', '14,-16': '.', '14,-15': '.', '14,-5': '.', '9,8': '.', '-8,-13': '.', '0,0': '.'}
#print(map)
# Oxygen at 14, -14
map["14,-14"] = "."
# construct a graph

graph = Graph()

for coord in map.keys():
    
    # There are potentially four coordinates that we can go to

    x = int(coord.split(",")[0])
    y = int(coord.split(",")[1])

    newCoord = "{0},{1}".format(x+1, y)
    if newCoord in map.keys():
        graph.add_edge(coord, newCoord, 1)

    newCoord = "{0},{1}".format(x-1, y)
    if newCoord in map.keys():
        graph.add_edge(coord, newCoord, 1)

    newCoord = "{0},{1}".format(x, y+1)
    if newCoord in map.keys():
        graph.add_edge(coord, newCoord, 1)

    newCoord = "{0},{1}".format(x, y-1)
    if newCoord in map.keys():
        graph.add_edge(coord, newCoord, 1)

print(graph)

# Find route from start to oxygen

print(find_path(graph, "0,0", "14,-14")) # Cost here is one too low


fullMap = {'0,1': '.', '0,2': '.', '-1,2': '.', '-2,2': '.', '-2,3': '.', '-2,4': '.', '-3,4': '.', '-4,4': '.', '-5,4': '.', '-6,4': '.', '-7,4': '.', '-8,4': '.', '-8,3': '.', '-8,2': '.', '-9,2': '.', '-10,2': '.', '-10,1': '.', '-10,0': '.', '-11,0': '.', '-12,0': '.', '-12,-1': '.', '-12,-2': '.', '-12,-3': '.', '-12,-4': '.', '-12,-5': '.', '-12,-6': '.', '-12,-7': '.', '-12,-8': '.', '-11,-8': '.', '-10,-8': '.', '-10,-9': '.', '-10,-10': '.', '-10,-11': '.', '-10,-12': '.', '-10,-13': '.', '-10,-14': '.', '-10,-15': '.', '-10,-16': '.', '-9,-16': '.', '-8,-16': '.', '-8,-17': '.', '-8,-18': '.', '-7,-18': '.', '-6,-18': '.', '-6,-17': '.', '-6,-16': '.', '-6,-15': '.', '-6,-14': '.', '-5,-14': '.', '-4,-14': '.', '-3,-14': '.', '-2,-14': '.', '-1,-14': '.', '0,-14': '.', '1,-14': '.', '2,-14': '.', '3,-14': '.', '4,-14': '.', '4,-13': '.', '4,-12': '.', '3,-12': '.', '2,-12': '.', '1,-12': '.', '0,-12': '.', '0,-11': '.', '0,-10': '.', '-1,-10': '.', '-2,-10': '.', '-2,-11': '.', '-2,-12': '.', '-3,-12': '.', '-4,-12': '.', '-4,-11': '.', '-4,-10': '.', '-5,-10': '.', '-6,-10': '.', '-6,-11': '.', '-6,-12': '.', '-7,-12': '.', '-8,-12': '.', '-8,-11': '.', '-8,-10': '.', '-8,-9': '.', '-8,-8': '.', '-7,-8': '.', '-6,-8': '.', '-6,-7': '.', '-6,-6': '.', '-6,-5': '.', '-6,-4': '.', '-5,-4': '.', '-4,-4': '.', '-4,-5': '.', '-4,-6': '.', '-4,-7': '.', '-4,-8': '.', '-3,-8': '.', '-2,-8': '.', '-2,-7': '.', '-2,-6': '.', '-2,-5': '.', '-2,-4': '.', '-1,-4': '.', '0,-4': '.', '0,-3': '.', '0,-2': '.', '-1,-2': '.', '-2,-2': '.', '-3,-2': '.', '-4,-2': '.', '-4,-1': '.', '-4,0': '.', '-4,1': '.', '-4,2': '.', '-5,2': '.', '-6,2': '.', '-6,1': '.', '-6,0': '.', '-7,0': '.', '-8,0': '.', '-8,-1': '.', '-8,-2': '.', '-8,-3': '.', '-8,-4': '.', '-9,-4': '.', '-10,-4': '.', '-10,-3': '.', '-10,-2': '.', '-10,-5': '.', '-10,-6': '.', '-9,-6': '.', '-8,-6': '.', '-7,-2': '.', '-6,-2': '.', '-3,0': '.', '-2,0': '.', '1,-2': '.', '2,-2': '.', '3,-2': '.', '4,-2': '.', '5,-2': '.', '6,-2': '.', '7,-2': '.', '8,-2': '.', '8,-1': '.', '8,0': '.', '8,1': '.', '8,2': '.', '7,2': '.', '6,2': '.', '6,1': '.', '6,0': '.', '5,0': '.', '4,0': '.', '3,0': '.', '2,0': '.', '2,1': '.', '2,2': '.', '3,2': '.', '4,2': '.', '4,3': '.', '4,4': '.', '5,4': '.', '6,4': '.', '7,4': '.', '8,4': '.', '8,5': '.', '8,6': '.', '7,6': '.', '6,6': '.', '6,7': '.', '6,8': '.', '6,9': '.', '6,10': '.', '6,11': '.', '6,12': '.', '5,12': '.', '4,12': '.', '4,13': '.', '4,14': '.', '4,15': '.', '4,16': '.', '3,16': '.', '2,16': '.', '1,16': '.', '0,16': '.', '-1,16': '.', '-2,16': '.', '-2,17': '.', '-2,18': '.', '-1,18': '.', '0,18': '.', '1,18': '.', '2,18': '.', '2,19': '.', '2,20': '.', '1,20': '.', '0,20': '.', '-1,20': '.', '-2,20': '.', '-3,20': '.', '-4,20': '.', '-5,20': '.', '-6,20': '.', '-6,19': '.', '-6,18': '.', '-6,17': '.', '-6,16': '.', '-5,16': '.', '-4,16': '.', '-4,17': '.', '-4,18': '.', '-4,15': '.', '-4,14': '.', '-3,14': '.', '-2,14': '.', '-1,14': '.', '0,14': '.', '1,14': '.', '2,14': '.', '2,13': '.', '2,12': '.', '1,12': '.', '0,12': '.', '0,11': '.', '0,10': '.', '1,10': '.', '2,10': '.', '2,9': '.', '2,8': '.', '2,7': '.', '2,6': '.', '1,6': '.', '0,6': '.', '0,5': '.', '0,4': '.', '1,4': '.', '2,4': '.', '-1,6': '.', '-2,6': '.', '-2,7': '.', '-2,8': '.', '-3,8': '.', '-4,8': '.', '-4,7': '.', '-4,6': '.', '-5,6': '.', '-6,6': '.', '-7,6': '.', '-8,6': '.', '-8,7': '.', '-8,8': '.', '-9,8': '.', '-10,8': '.', '-10,9': '.', '-10,10': '.', '-11,10': '.', '-12,10': '.', '-13,10': '.', '-14,10': '.', '-14,11': '.', '-14,12': '.', '-13,12': '.', '-12,12': '.', '-11,12': '.', '-10,12': '.', '-10,13': '.', '-10,14': '.', '-9,14': '.', '-8,14': '.', '-8,15': '.', '-8,16': '.', '-9,16': '.', '-10,16': '.', '-10,17': '.', '-10,18': '.', '-10,19': '.', '-10,20': '.', '-11,20': '.', '-12,20': '.', '-13,20': '.', '-14,20': '.', '-15,20': '.', '-16,20': '.', '-16,19': '.', '-16,18': '.', '-15,18': '.', '-14,18': '.', '-13,18': '.', '-12,18': '.', '-12,17': '.', '-12,16': '.', '-12,15': '.', '-12,14': '.', '-13,14': '.', '-14,14': '.', '-15,14': '.', '-16,14': '.', '-16,15': '.', '-16,16': '.', '-17,16': '.', '-18,16': '.', '-18,15': '.', '-18,14': '.', '-18,13': '.', '-18,12': '.', '-18,11': '.', '-18,10': '.', '-18,9': '.', '-18,8': '.', '-17,8': '.', '-16,8': '.', '-16,9': '.', '-16,10': '.', '-16,11': '.', '-16,12': '.', '-16,7': '.', '-16,6': '.', '-15,6': '.', '-14,6': '.', '-13,6': '.', '-12,6': '.', '-12,7': '.', '-12,8': '.', '-13,8': '.', '-14,8': '.', '-11,6': '.', '-10,6': '.', '-10,5': '.', '-10,4': '.', '-11,4': '.', '-12,4': '.', '-13,4': '.', '-14,4': '.', '-14,3': '.', '-14,2': '.', '-14,1': '.', '-14,0': '.', '-14,-1': '.', '-14,-2': '.', '-15,-2': '.', '-16,-2': '.', '-17,-2': '.', '-18,-2': '.', '-18,-1': '.', '-18,0': '.', '-19,0': '.', '-20,0': '.', '-20,1': '.', '-20,2': '.', '-20,3': '.', '-20,4': '.', '-20,5': '.', '-20,6': '.', '-20,7': '.', '-20,8': '.', '-20,9': '.', '-20,10': '.', '-20,11': '.', '-20,12': '.', '-20,13': '.', '-20,14': '.', '-20,15': '.', '-20,16': '.', '-20,17': '.', '-20,18': '.', '-20,19': '.', '-20,20': '.', '-19,20': '.', '-18,20': '.', '-18,19': '.', '-18,18': '.', '-19,6': '.', '-18,6': '.', '-18,5': '.', '-18,4': '.', '-17,4': '.', '-16,4': '.', '-16,3': '.', '-16,2': '.', '-16,1': '.', '-16,0': '.', '-17,2': '.', '-18,2': '.', '-20,-1': '.', '-20,-2': '.', '-20,-3': '.', '-20,-4': '.', '-19,-4': '.', '-18,-4': '.', '-18,-5': '.', '-18,-6': '.', '-19,-6': '.', '-20,-6': '.', '-20,-7': '.', '-20,-8': '.', '-19,-8': '.', '-18,-8': '.', '-18,-9': '.', '-18,-10': '.', '-17,-10': '.', '-16,-10': '.', '-15,-10': '.', '-14,-10': '.', '-14,-9': '.', '-14,-8': '.', '-15,-8': '.', '-16,-8': '.', '-16,-7': '.', '-16,-6': '.', '-16,-5': '.', '-16,-4': '.', '-15,-4': '.', '-14,-4': '.', '-14,-5': '.', '-14,-6': '.', '-14,-11': '.', '-14,-12': '.', '-13,-12': '.', '-12,-12': '.', '-12,-11': '.', '-12,-10': '.', '-12,-13': '.', '-12,-14': '.', '-13,-14': '.', '-14,-14': '.', '-15,-14': '.', '-16,-14': '.', '-16,-13': '.', '-16,-12': '.', '-17,-12': '.', '-18,-12': '.', '-18,-13': '.', '-18,-14': '.', '-18,-15': '.', '-18,-16': '.', '-18,-17': '.', '-18,-18': '.', '-19,-18': '.', '-20,-18': '.', '-20,-17': '.', '-20,-16': '.', '-20,-15': '.', '-20,-14': '.', '-20,-13': '.', '-20,-12': '.', '-20,-11': '.', '-20,-10': '.', '-17,-18': '.', '-16,-18': '.', '-15,-18': '.', '-14,-18': '.', '-14,-17': '.', '-14,-16': '.', '-15,-16': '.', '-16,-16': '.', '-13,-16': '.', '-12,-16': '.', '-12,-17': '.', '-12,-18': '.', '-11,-18': '.', '-10,-18': '.', '-13,2': '.', '-12,2': '.', '-15,16': '.', '-14,16': '.', '-9,20': '.', '-8,20': '.', '-8,19': '.', '-8,18': '.', '-7,14': '.', '-6,14': '.', '-6,13': '.', '-6,12': '.', '-7,12': '.', '-8,12': '.', '-8,11': '.', '-8,10': '.', '-7,10': '.', '-6,10': '.', '-6,9': '.', '-6,8': '.', '-5,10': '.', '-4,10': '.', '-3,10': '.', '-2,10': '.', '-2,11': '.', '-2,12': '.', '-3,12': '.', '-4,12': '.', '-1,8': '.', '0,8': '.', '3,6': '.', '4,6': '.', '4,7': '.', '4,8': '.', '4,9': '.', '4,10': '.', '3,20': '.', '4,20': '.', '4,19': '.', '4,18': '.', '5,18': '.', '6,18': '.', '6,17': '.', '6,16': '.', '7,16': '.', '8,16': '.', '9,16': '.', '10,16': '.', '10,15': '.', '10,14': '.', '10,13': '.', '10,12': '.', '9,12': '.', '8,12': '.', '8,13': '.', '8,14': '.', '7,14': '.', '6,14': '.', '8,11': '.', '8,10': '.', '9,10': '.', '10,10': '.', '10,9': '.', '10,8': '.', '10,7': '.', '10,6': '.', '11,6': '.', '12,6': '.', '13,6': '.', '14,6': '.', '14,7': '.', '14,8': '.', '13,8': '.', '12,8': '.', '12,9': '.', '12,10': '.', '12,11': '.', '12,12': '.', '13,12': '.', '14,12': '.', '15,12': '.', '16,12': '.', '16,11': '.', '16,10': '.', '15,10': '.', '14,10': '.', '17,10': '.', '18,10': '.', '18,11': '.', '18,12': '.', '18,13': '.', '18,14': '.', '17,14': '.', '16,14': '.', '16,15': '.', '16,16': '.', '17,16': '.', '18,16': '.', '18,17': '.', '18,18': '.', '18,19': '.', '18,20': '.', '17,20': '.', '16,20': '.', '15,20': '.', '14,20': '.', '14,19': '.', '14,18': '.', '13,18': '.', '12,18': '.', '12,19': '.', '12,20': '.', '11,20': '.', '10,20': '.', '10,19': '.', '10,18': '.', '9,18': '.', '8,18': '.', '8,19': '.', '8,20': '.', '7,20': '.', '6,20': '.', '12,17': '.', '12,16': '.', '13,16': '.', '14,16': '.', '14,15': '.', '14,14': '.', '13,14': '.', '12,14': '.', '15,18': '.', '16,18': '.', '18,9': '.', '18,8': '.', '18,7': '.', '18,6': '.', '18,5': '.', '18,4': '.', '17,4': '.', '16,4': '.', '16,5': '.', '16,6': '.', '16,7': '.', '16,8': '.', '16,3': '.', '16,2': '.', '17,2': '.', '18,2': '.', '18,1': '.', '18,0': '.', '17,0': '.', '16,0': '.', '16,-1': '.', '16,-2': '.', '17,-2': '.', '18,-2': '.', '18,-3': '.', '18,-4': '.', '17,-4': '.', '16,-4': '.', '16,-5': '.', '16,-6': '.', '17,-6': '.', '18,-6': '.', '18,-7': '.', '18,-8': '.', '18,-9': '.', '18,-10': '.', '18,-11': '.', '18,-12': '.', '18,-13': '.', '18,-14': '.', '17,-14': '.', '16,-14': '.', '16,-13': '.', '16,-12': '.', '15,-12': '.', '14,-12': '.', '14,-11': '.', '14,-10': '.', '15,-10': '.', '16,-10': '.', '16,-9': '.', '16,-8': '.', '15,-8': '.', '14,-8': '.', '13,-8': '.', '12,-8': '.', '11,-8': '.', '10,-8': '.', '10,-7': '.', '10,-6': '.', '11,-6': '.', '12,-6': '.', '12,-5': '.', '12,-4': '.', '13,-4': '.', '14,-4': '.', '14,-3': '.', '14,-2': '.', '14,-1': '.', '14,0': '.', '13,0': '.', '12,0': '.', '12,-1': '.', '12,-2': '.', '11,-2': '.', '10,-2': '.', '10,-1': '.', '10,0': '.', '10,1': '.', '10,2': '.', '11,2': '.', '12,2': '.', '12,3': '.', '12,4': '.', '11,4': '.', '10,4': '.', '13,4': '.', '14,4': '.', '14,3': '.', '14,2': '.', '10,-3': '.', '10,-4': '.', '9,-4': '.', '8,-4': '.', '8,-5': '.', '8,-6': '.', '8,-7': '.', '8,-8': '.', '8,-9': '.', '8,-10': '.', '8,-11': '.', '8,-12': '.', '8,-13': '.', '8,-14': '.', '8,-15': '.', '8,-16': '.', '8,-17': '.', '8,-18': '.', '7,-18': '.', '6,-18': '.', '5,-18': '.', '4,-18': '.', '3,-18': '.', '2,-18': '.', '1,-18': '.', '0,-18': '.', '0,-17': '.', '0,-16': '.', '-1,-16': '.', '-2,-16': '.', '-2,-17': '.', '-2,-18': '.', '-3,-18': '.', '-4,-18': '.', '-4,-17': '.', '-4,-16': '.', '1,-16': '.', '2,-16': '.', '3,-16': '.', '4,-16': '.', '5,-16': '.', '6,-16': '.', '6,-15': '.', '6,-14': '.', '6,-13': '.', '6,-12': '.', '6,-11': '.', '6,-10': '.', '6,-9': '.', '6,-8': '.', '6,-7': '.', '6,-6': '.', '6,-5': '.', '6,-4': '.', '5,-4': '.', '4,-4': '.', '4,-5': '.', '4,-6': '.', '4,-7': '.', '4,-8': '.', '4,-9': '.', '4,-10': '.', '3,-10': '.', '2,-10': '.', '2,-9': '.', '2,-8': '.', '2,-7': '.', '2,-6': '.', '2,-5': '.', '2,-4': '.', '1,-6': '.', '0,-6': '.', '0,-7': '.', '0,-8': '.', '9,-18': '.', '10,-18': '.', '10,-17': '.', '10,-16': '.', '10,-15': '.', '10,-14': '.', '10,-13': '.', '10,-12': '.', '10,-11': '.', '10,-10': '.', '11,-10': '.', '12,-10': '.', '12,-11': '.', '12,-12': '.', '12,-13': '.', '12,-14': '.', '12,-15': '.', '12,-16': '.', '12,-17': '.', '12,-18': '.', '13,-18': '.', '14,-18': '.', '15,-18': '.', '16,-18': '.', '17,-18': '.', '18,-18': '.', '18,-17': '.', '18,-16': '.', '17,-16': '.', '16,-16': '.', '15,-16': '.', '14,-16': '.', '14,-15': '.', '14,-5': '.', '14,-6': '.', '9,8': '.', '8,8': '.', '-8,-13': '.', '-8,-14': '.', '0,0': '.'}
fullMap["14,-14"] = "."

# PART 2

oxygenFilled = ["14,-14"]

print(len(fullMap.keys()))
time = 0

while len(oxygenFilled) < len(fullMap.keys()):

    print(oxygenFilled)

    oxygenFilledDC = copy.deepcopy(oxygenFilled)
    for coord in oxygenFilledDC:

        # Add oxygen to all of the things adajenct if they don't already have oxygen in 
        # There are potentially four coordinates that we can go to

        x = int(coord.split(",")[0])
        y = int(coord.split(",")[1])

        newCoord = "{0},{1}".format(x+1, y)
        if newCoord in fullMap.keys() and newCoord not in oxygenFilled:
            oxygenFilled.append(newCoord)

        newCoord = "{0},{1}".format(x-1, y)
        if newCoord in fullMap.keys() and newCoord not in oxygenFilled:
            oxygenFilled.append(newCoord)

        newCoord = "{0},{1}".format(x, y+1)
        if newCoord in fullMap.keys() and newCoord not in oxygenFilled:
            oxygenFilled.append(newCoord)

        newCoord = "{0},{1}".format(x, y-1)
        if newCoord in fullMap.keys() and newCoord not in oxygenFilled:
            oxygenFilled.append(newCoord)

    time+=1
    print(oxygenFilled)

print(time)